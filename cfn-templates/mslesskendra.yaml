Resources:
  ##Create Cognito Userpool for Authentication
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      AliasAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      
  ##Create Cognito IdentityPool for Authorization and associate the UserPool client with it
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowClassicFlow: false
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - 'cognito-idp.${region}.amazonaws.com/${client}'
            - region: !Ref 'AWS::Region'
              client: !Ref UserPool
              
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref UserPool
      
  ##Attach Auth/UnAuth roles for to ID Pool
  IdentityPoolRoleAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        'authenticated': !GetAtt IDPoolAuthRole.Arn
        'unauthenticated': !GetAtt IDPoolUnauthRole.Arn
          
  ##Role to be used as MSLess role for the Identity Pool
  IDPoolAuthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      
  ##Role to be used as Unauth role for the Identity Pool
  IDPoolUnauthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      
  ## Role to be used by the repository 
  MSLessRepositoryAssumeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !GetAtt
                    - Repository
                    - Arn
                Action:
                  - 'codecommit:GitPull'
          PolicyName: MSLessRepositoryExecutionPolicy
  
  ##The role to be assumed by the application using sts_assume_role
  MSLessAppCredsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt IDPoolAuthRole.Arn
                - !Join
                  - ''
                  - - 'arn:aws:sts::'
                    - !Ref 'AWS::AccountId'
                    - ':assumed-role/'
                    - !Ref IDPoolAuthRole
                    - '/CognitoIdentityCredentials'
                - !GetAtt IDPoolAuthRole.Arn
                - !Join
                  - ''
                  - - 'arn:aws:sts::'
                    - !Ref 'AWS::AccountId'
                    - ':assumed-role/'
                    - !Ref IDPoolUnauthRole
                    - '/CognitoIdentityCredentials'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:kendra:${region}:${account}:index/${index}'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                    index: !GetAtt MSLessKendraIndex.Id
                Action:
                  - 'kendra:DescribeIndex'
                  - 'kendra:SubmitFeedback'
                  - 'kendra:ListDataSources'
                  - 'kendra:Query'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${bucket}*'
                  - bucket: !Ref MediaBucket
                Action:
                  - 's3:GetObject'                
          PolicyName: AWSMSLessAppCredsPolicy
      
  ##Create the Role needed to create a Kendra Index
  KendraIndexRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'Kendra'
                Action:
                  - 'cloudwatch:PutMetricData'
              - Effect: Allow
                Resource: '*'
                Action: 'logs:DescribeLogGroups'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:logs:${region}:${account}:log-group:/aws/kendra/*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                Action: 'logs:CreateLogGroup'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:logs:${region}:${account}:log-group:/aws/kendra/*:log-stream:*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                Action: 
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
          PolicyName: KendraMSLessIndexPolicy
      
  ##Create the Kendra Index
  MSLessKendraIndex:
    Type: 'AWS::Kendra::Index'
    Properties:
      Edition: 'DEVELOPER_EDITION'
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-Index'
      RoleArn: !GetAtt KendraIndexRole.Arn

  ##Attach Custom Data Source
  KendraMSLessDS:
    Type: 'AWS::Kendra::DataSource'
    Properties: 
      IndexId: !GetAtt MSLessKendraIndex.Id
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-DS'
      Type: 'CUSTOM'
  
  MSLessDynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "s3url"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "s3url"
          KeyType: "HASH"
      ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
            
  MSLessLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:kendra:${region}:${account}:index/${index}*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                    index: !GetAtt MSLessKendraIndex.Id
                Action:
                  - 'kendra:*'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${bucket}*'
                  - bucket: !Ref MediaBucket
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
              - Effect: Allow
                Resource: !GetAtt MSLessDynamoTable.Arn
                Action:
                  - 'dynamodb:*'
              - Effect: Allow
                Resource: '*'
                Action:
                  - 'transcribe:*'
          PolicyName: MSLessLambdaPolicy
          
  S3CrawlLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Role: !GetAtt 'MSLessLambdaRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'S3CodeBucket'
        S3Key: !Ref 'S3CrawlLambdaKey'
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          MEDIA_FOLDER_PREFIX: !Ref MediaFolderPrefix
          MEDIA_FILE_TABLE: !Ref MSLessDynamoTable
          INDEX_ID: !GetAtt MSLessKendraIndex.Id
          DS_ID: !GetAtt KendraMSLessDS.Id
          STACK_NAME: !Ref AWS::StackName
  
  S3JobCompletionLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Role: !GetAtt 'MSLessLambdaRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'S3CodeBucket'
        S3Key: !Ref 'S3JobCompletionLambdaKey'
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          MEDIA_FOLDER_PREFIX: !Ref MediaFolderPrefix
          MEDIA_FILE_TABLE: !Ref MSLessDynamoTable
          INDEX_ID: !GetAtt MSLessKendraIndex.Id
          DS_ID: !GetAtt KendraMSLessDS.Id
          STACK_NAME: !Ref AWS::StackName
  
  TrancriptionJobCompleteEvent:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source: 
          - aws.transcribe
        detail-type:
          - "Transcribe Job State Change"
        detail:
          TranscriptionJobStatus:
            - "COMPLETED"
            - "FAILED"
      State: ENABLED
      Targets:
        - 
          Arn: !GetAtt S3JobCompletionLambdaFunction.Arn
          Id: !Ref S3JobCompletionLambdaFunction
          
  JobCompleteLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3JobCompletionLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TrancriptionJobCompleteEvent.Arn

  DSSyncStartSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Join
        - ''
        - - 'rate('
          - !Ref SyncSchedule
          - ')'
      State: ENABLED
      Targets:
        - 
          Arn: !GetAtt S3CrawlLambdaFunction.Arn
          Id: !Ref S3CrawlLambdaFunction
          
  SyncScheduleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3CrawlLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DSSyncStartSchedule.Arn

  CustomResource:
    Type: Custom::CustomResource
    DependsOn: 
      - S3CrawlLambdaFunction
      - S3JobCompletionLambdaFunction
      - TrancriptionJobCompleteEvent
    Properties:
      ServiceToken: !GetAtt S3CrawlLambdaFunction.Arn
    
  ##Create CodeCommit Repository for the code of the application
  Repository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      Code:
        BranchName: main
        S3:
          Bucket: !Ref S3CodeBucket
          Key: !Ref S3CodeKey
      RepositoryName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-Repo'
          
  ##Create an App for our application in the Amplify Console
  AmplifyApp:
    Type: 'AWS::Amplify::App'
    Properties:
      BuildSpec: |-
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - npm install
                - npm install typescript@4.0.5
                - npm install react-player
            build:
              commands:
                - npm run build
                - REACT_APP_INDEX_ID=$REACT_APP_INDEX_ID
                - REACT_APP_REGION=$REACT_APP_REGION
                - REACT_APP_PROJECT_REGION=$REACT_APP_PROJECT_REGION
                - REACT_APP_IDENTITY_POOL_ID=$REACT_APP_IDENTITY_POOL_ID
                - REACT_APP_COGNITO_REGION=$REACT_APP_COGNITO_REGION
                - REACT_APP_USER_POOL_ID=$REACT_APP_USER_POOL_ID
                - REACT_APP_WEB_CLIENT_ID=$REACT_APP_WEB_CLIENT_ID
                - REACT_APP_ROLE_ARN=$REACT_APP_ROLE_ARN
          artifacts:
            baseDirectory: build
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
      EnvironmentVariables:
        - Name: REACT_APP_COGNITO_REGION
          Value: !Ref 'AWS::Region'
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_INDEX_ID
          Value: !GetAtt MSLessKendraIndex.Id
        - Name: REACT_APP_PROJECT_REGION
          Value: !Ref 'AWS::Region'
        - Name: REACT_APP_REGION
          Value: !Ref 'AWS::Region'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_WEB_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_ROLE_ARN
          Value: !GetAtt MSLessAppCredsRole.Arn
      IAMServiceRole: !GetAtt MSLessRepositoryAssumeRole.Arn
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-App'
      Repository: !GetAtt
        - Repository
        - CloneUrlHttp
  ##Create a branch for the App to be built
  AmplifyBranch:
    Type: 'AWS::Amplify::Branch'
    Properties:
      AppId: !GetAtt
        - AmplifyApp
        - AppId
      EnableAutoBuild: true
      BranchName: main
      
Parameters:
  S3CodeBucket:
    Type: String
  S3CodeKey:
    Type: String
  MediaBucket:
    Type: String
  MediaFolderPrefix:
    Type: String
  S3CrawlLambdaKey:
    Type: String
  S3JobCompletionLambdaKey:
    Type: String
  SyncSchedule:
    Type: String
    Default: '24 hours'
    AllowedValues:
      - '2 hours'
      - '6 hours'
      - '12 hours'
      - '24 hours'
    Description: 'Please provide how frequently you want to synchronize the S3 bucket with the Kendra index - 6 hours, 12 hours, 24 hours. The default is 24 hours'
    
Outputs:
  UserPoolClientID: 
    Value: !Ref UserPoolClient
  UserPoolArn: 
    Value: !GetAtt UserPool.Arn
  UserPoolProviderURL:
    Value: !GetAtt UserPool.ProviderURL
  UserPoolSigningKeyObject:
    Value:
      !Join
        - ''
        - - !GetAtt UserPool.ProviderURL
          - '/.well-known/jwks.json'
  IdentityPoolId: 
    Value: !Ref IdentityPool
  CodeCommitRepository:
    Value: !Ref Repository
  Application:
    Value: !Ref AmplifyApp
  KendraMSLessIndexRoleArn: 
    Value: !GetAtt KendraIndexRole.Arn 
  KendraIndexID:
    Value: !GetAtt MSLessKendraIndex.Id
  KendraDataSourceID:
    Value: !GetAtt KendraMSLessDS.Id
  ReactAppCognitoRegion:
    Value: !Ref 'AWS::Region'
  ReactAppIdentityPoolId:
    Value: !Ref IdentityPool
  ReactAppIndexId:
    Value: !GetAtt MSLessKendraIndex.Id
  ReactAppProjectRegion:
    Value: !Ref 'AWS::Region'
  ReactAppRegion:
    Value: !Ref 'AWS::Region'
  ReactAppUserPoolId:
    Value: !Ref UserPool
  ReactAppWebClientId:
    Value: !Ref UserPoolClient
  ReactAppRoleArn:
    Value: !GetAtt MSLessAppCredsRole.Arn